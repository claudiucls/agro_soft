/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.text.DecimalFormat;
import java.time.format.DateTimeFormatter;

import java.util.List;
import java.util.Locale;
import javax.swing.JOptionPane;

import javax.swing.table.DefaultTableModel;
import models.BonConsum;
import models.Factura;
import models.Nir;

import services.DBQueries;

/**
 *
 * @author Claudiu
 */
public class JIStergere extends javax.swing.JInternalFrame {

    /**
     * Creates new form JIStergere
     */
    private DBQueries dq = new DBQueries();
    private DecimalFormat df = new DecimalFormat("#.00");

    public JIStergere() {

        initComponents();
        setLocation(setCenterPoint());
        refreshTableFacturi(dq.getAllFactura());
        jTable1.setComponentPopupMenu(jPopupMenu1);
    }

    public Point setCenterPoint() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        Point p = new Point(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
        return p;
    }

    public void refreshTableBonuri(List<BonConsum> lista) {
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };
        model.setColumnIdentifiers(new Object[]{"Nr.Crt.", "ID", "Nr Bon", "Data", "Comanda", "Gestiune", "Valoare"});

        Object[] row = new Object[7];
        for (int i = 0; i < lista.size(); i++) {
            row[0] = i + 1;
            row[1] = lista.get(i).getId();
            row[2] = lista.get(i).getNrBon();
            row[3] = lista.get(i).getData();
            row[4] = lista.get(i).getComanda();
            row[5] = dq.getGestiuneFrinId(lista.get(i).getGestiune());
            row[6] = df.format(dq.calcValBon(lista.get(i)));
            model.addRow(row);
        }

        jTable1.setModel(model);
        dq.resizeColumnWidth(jTable1);
    }

    public void refreshTableFacturi(List<Factura> lista) {
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };
        model.setColumnIdentifiers(new Object[]{"Nr.Crt.", "ID", "Nr Factura", "Data", "Client", "Gestiune", "Valoare"});

        Object[] row = new Object[7];
        for (int i = 0; i < lista.size(); i++) {
            row[0] = i + 1;
            row[1] = lista.get(i).getId();
            row[2] = lista.get(i).getNrFact();
            row[3] = DateTimeFormatter.ofPattern("dd-MM-yyyy").format(lista.get(i).getData());
            row[4] = lista.get(i).getClient();
            row[5] = dq.getGestiuneFrinId(lista.get(i).getGestiune());
            row[6] = df.format(dq.calcValFactura(lista.get(i)));
            model.addRow(row);
        }

        jTable1.setModel(model);
        dq.resizeColumnWidth(jTable1);
    }

    public void refreshTableNiruri(List<Nir> lista) {
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };
        model.setColumnIdentifiers(new Object[]{"Nr.Crt.", "ID", "Nr Nir", "Data", "Factura", "Furnizor", "Gestiune", "Valoare"});

        Object[] row = new Object[8];
        for (int i = 0; i < lista.size(); i++) {
            row[0] = i + 1;
            row[1] = lista.get(i).getId();
            row[2] = lista.get(i).getNrNir();
            row[3] = DateTimeFormatter.ofPattern("dd-MM-yyyy").format(lista.get(i).getDate());
            row[4] = lista.get(i).getTipDoc() + " " + lista.get(i).getFactura();
            row[5] = lista.get(i).getFurnizor();
            row[6] = dq.getGestiuneFrinId(lista.get(i).getGestiune());
            row[7] = df.format(dq.calcValNir(lista.get(i)));
            model.addRow(row);
        }

        jTable1.setModel(model);
        dq.resizeColumnWidth(jTable1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jMenuItem2.setText("Sterge");
        jMenuItem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem2MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItem2MouseReleased(evt);
            }
        });
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem2);

        setClosable(true);
        setMaximizable(true);
        setTitle("Stergere Factura / Bon Consum / NIR");

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("Ce doriti sa stergeti ? ");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Factura", "Bon de Consum", "NIR" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        jScrollPane1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        )
        {public boolean isCellEditable(int row, int column){return false;}}
    );
    jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    jTable1.getTableHeader().setReorderingAllowed(false);
    jScrollPane1.setViewportView(jTable1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 751, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
            .addContainerGap())
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem2MousePressed

    }//GEN-LAST:event_jMenuItem2MousePressed

    private void jMenuItem2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem2MouseReleased
        int n = jComboBox1.getSelectedIndex();
        int row = jTable1.getSelectedRow();
        int id = (int) jTable1.getModel().getValueAt(row, 1);
        switch (n) {
            case 0:
                deleteFactura(id);
                break;
            case 1:
                deleteBon(id);
                break;
            case 2:
                deleteNir(id);
                break;

        }
    }//GEN-LAST:event_jMenuItem2MouseReleased

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        int n = jComboBox1.getSelectedIndex();
        switch (n) {
            case 0:
                refreshTableFacturi(dq.getAllFactura());
                break;
            case 1:
                refreshTableBonuri(dq.getAllBonConsum());
                break;
            case 2:
                refreshTableNiruri(dq.getAllNir());
                break;
            default:
                refreshTableFacturi(dq.getAllFactura());
                break;
        }
    }//GEN-LAST:event_jComboBox1ItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void deleteFactura(int id) {
        int optiune = JOptionPane.showConfirmDialog(null, "Esti sigur ca vrei sa stergi Facturta cu id-ul " + id, "Sterge Factura?", JOptionPane.YES_NO_OPTION);
        if (optiune == JOptionPane.YES_OPTION) {
            if (dq.deleteProduseDinFactura(id)) {
                if (!dq.deleteFactura(id)) {
                    JOptionPane.showMessageDialog(null, "Eroare stergere factura");
                }
            } else
             JOptionPane.showMessageDialog(null, "Eroare stergere produse din factura");
        }
        JOptionPane.showMessageDialog(null, "Factura a fost stearsa");
        refreshTableFacturi(dq.getAllFactura());
    }

    private void deleteBon(int id) {
        int optiune = JOptionPane.showConfirmDialog(null, "Esti sigur ca vrei sa stergi Bonul de Consum cu id-ul " + id, "Sterge Bon?", JOptionPane.YES_NO_OPTION);
        if (optiune == JOptionPane.YES_OPTION) {
            if (dq.deleteProduseDinBon(id)) {
                if (!dq.deleteBon(id)) {
                    JOptionPane.showMessageDialog(null, "Eroare stergere Bon");
                }
            } else
            JOptionPane.showMessageDialog(null, "Eroare stergere produse din Bon");
        }
        JOptionPane.showMessageDialog(null, "Bonul de Consum a fost stears");
        refreshTableBonuri(dq.getAllBonConsum());
    }

    private void deleteNir(int id) {
        Nir n = new Nir();
        n.setId(id);
        int optiune = JOptionPane.showConfirmDialog(null, "Esti sigur ca vrei sa stergi Nir-ul cu id-ul " + id, "Sterge Nir?", JOptionPane.YES_NO_OPTION);
        if (optiune == JOptionPane.YES_OPTION) {
            if (dq.deleteProduseDinNir(n)) {
                if (!dq.deleteNir(id)) {
                    JOptionPane.showMessageDialog(null, "Eroare stergere nir");
                }
            } else
            JOptionPane.showMessageDialog(null, "Eroare stergere produse din nir");
        }
        JOptionPane.showMessageDialog(null, "NIR-ul a fost stears");
        refreshTableNiruri(dq.getAllNir());

    }
}
